/*=========================================================================

  Library:   CTK

  Copyright (c) Kitware Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0.txt

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This file was originally developed by Davide Punzo, punzodavide@hotmail.it,
  and development was supported by the Center for Intelligent Image-guided Interventions (CI3).

=========================================================================*/

#ifndef __ctkDICOMQueryTask_h
#define __ctkDICOMQueryTask_h

// Qt includes 
#include <QObject>
#include <QMap>
#include <QVariant>
#include <QSharedPointer>

// ctkDICOMCore includes
#include "ctkDICOMCoreExport.h"
#include "ctkDICOMServer.h"
#include <ctkAbstractTask.h>

class ctkDICOMQuery;
class ctkDICOMQueryTaskPrivate;
class ctkDICOMTaskResults;

/// \ingroup DICOM_Core
class CTK_DICOM_CORE_EXPORT ctkDICOMQueryTask : public ctkAbstractTask
{
  Q_OBJECT
  Q_ENUMS(DICOMLevel)
  Q_PROPERTY(QString studyInstanceUID READ studyInstanceUID WRITE setStudyInstanceUID);
  Q_PROPERTY(QString seriesInstanceUID READ seriesInstanceUID WRITE setSeriesInstanceUID);
  Q_PROPERTY(DICOMLevel queryLevel READ queryLevel WRITE setQueryLevel);

public:
  explicit ctkDICOMQueryTask();
  virtual ~ctkDICOMQueryTask();
  
  enum DICOMLevel{
    Studies,
    Series,
    Instances
  };

  /// Query Level
  void setQueryLevel(DICOMLevel queryLevel);
  DICOMLevel queryLevel() const;

  /// Stop task
  void setStop(const bool& stop);

  /// Execute task
  void run();

  /// Access the list of datasets from the last query.
  Q_INVOKABLE QList<QSharedPointer<ctkDICOMTaskResults>> taskResults()const;

  ///
  /// Filters are keyword/value pairs as generated by
  /// the ctkDICOMWidgets in a human readable (and editable)
  /// format.  The Query is responsible for converting these
  /// into the appropriate dicom syntax for the C-Find
  /// Currently supports the keys: Name, Study, Series, ID, Modalities,
  /// StartDate and EndDate
  /// Key         DICOM Tag                Type        Example
  /// -----------------------------------------------------------
  /// Name        DCM_PatientName          QString     JOHNDOE
  /// Study       DCM_StudyDescription     QString
  /// Series      DCM_SeriesDescription    QString
  /// ID          DCM_PatientID            QString
  /// Modalities  DCM_ModalitiesInStudy    QStringList CT, MR, MN
  /// StartDate   DCM_StudyDate            QString     20090101
  /// EndDate     DCM_StudyDate            QString     20091231
  /// No filter (empty) by default.
  Q_INVOKABLE void setFilters(const QMap<QString, QVariant> &filters);
  Q_INVOKABLE QMap<QString, QVariant> filters()const;

  /// Server
  Q_INVOKABLE QSharedPointer<ctkDICOMServer> server()const;
  Q_INVOKABLE void setServer(ctkDICOMServer& server);

  /// Study instance UID
  void setStudyInstanceUID(const QString& studyInstanceUID);
  QString studyInstanceUID() const;

  /// Series instance UID
  void setSeriesInstanceUID(const QString& seriesInstanceUID);
  QString seriesInstanceUID() const;

  /// Querier
  Q_INVOKABLE ctkDICOMQuery* querier()const;

protected:
  QScopedPointer<ctkDICOMQueryTaskPrivate> d_ptr;

  /// Constructor allowing derived class to specify a specialized pimpl.
  ///
  /// \note You are responsible to call init() in the constructor of
  /// derived class. Doing so ensures the derived class is fully
  /// instantiated in case virtual method are called within init() itself.
  ctkDICOMQueryTask(ctkDICOMQueryTaskPrivate* pimpl);

private:
  Q_DECLARE_PRIVATE(ctkDICOMQueryTask);
  Q_DISABLE_COPY(ctkDICOMQueryTask);
};

#endif
